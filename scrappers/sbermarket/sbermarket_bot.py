import json
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold, hlink
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton

from dotenv import load_dotenv
from sbermarket import get_data

load_dotenv()

TOKEN = str(os.environ.get('TOKEN'))

bot = Bot(token=TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    print('BOT STARTED')


class Form(StatesGroup):
    search = State()
    resource = State()


def main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    last_attempt = KeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å')
    help_button = KeyboardButton(text='–°–ø—Ä–∞–≤–∫–∞')
    description_button = KeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ')
    search_button = KeyboardButton(text='–í—ã–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø–æ–∏—Å–∫–∞')
    search_button = KeyboardButton(text='–í–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
    keyboard.add(last_attempt).add(description_button, help_button).add(search_button)
    return keyboard


def resource_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ú–í–∏–¥–µ–æ', callback_data='res_mvideo')],
        [InlineKeyboardButton(text='–°–±–µ—Ä–ú–∞—Ä–∫–µ—Ç', callback_data='res_sbermarket')],
        [InlineKeyboardButton(text='DNS', callback_data='res_dns')],
        [InlineKeyboardButton(text='–ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è –¶–µ–Ω—Ç—Ä', callback_data='res_kcent')],
        [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')],
    ])
    return keyboard


@dp.message_handler(commands='start')
async def start_command(message: types.Message):
    await message.answer(f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –í–∞—Å —Ç–æ–≤–∞—Ä—ã –Ω–∞ –°–±–µ—Ä–ú–∞—Ä–∫–µ—Ç–µ —Å–æ —Å–∫–∏–¥–∫–æ–π!',
                         reply_markup=main_menu_keyboard())
    await message.delete()


@dp.message_handler(Text(equals='–í—ã–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø–æ–∏—Å–∫–∞'))
async def resource_command(message: types.Message):
    await message.answer(text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–∞–π—Ç–∞!', reply_markup=ReplyKeyboardRemove())
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–µ—Ç–µ —Å–∞–π—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞!', reply_markup=resource_keyboard())
    await message.delete()


@dp.message_handler(Text(equals='–í–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'))
async def get_discount_search(message: types.Message):
    await Form.search.set()
    await message.reply("–í–≤–æ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")


@dp.callback_query_handler(lambda callback: callback.startswith('res'), state=Form.search)
async def get_resource(callback: types.CallbackQuery):
    if callback.data.endswith('mvideo'):
        async with state.proxy() as data:
            data['search'] = callback.data ### –§–ò–ö–°–ò–¢–¨!!!!



@dp.callback_query_handler()
async def main_menu(callback: types.CallbackQuery):
    await callback.message.answer('–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=main_menu_keyboard())


@dp.message_handler(state=Form.search)
async def get_discount_search(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['search'] = message.text
    await message.answer('–ò–¥–µ—Ç –ø–æ–∏—Å–∫. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 30 —Å–µ–∫—É–Ω–¥\n–û–∂–∏–¥–∞–π—Ç–µ...')
    get_data(message.text, message.from_user.id)
    with open(f'data/sbermarket-{message.from_user["id"]}.json', encoding='utf-8') as file:
        data = json.load(file)
    for item in data[:6]:
        card = f'{hlink(item.get("item_name"), item.get("url"))}\n' \
               f'{hbold("–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞")} {item.get("old_price")}\n' \
               f'üë©üèø‚Äçüéìüë©üèø‚Äçüéì{hbold("–ù–æ–≤–∞—è —Ü–µ–Ω–∞")} -{item.get("discount")}%: {item.get("item_price")}üë©üèø‚Äçüéìüë©üèø‚Äçüéì\n'
        await message.answer(card)
    async with state.proxy() as data:
        for i in data:
            print(data)
    await state.finish()


def main():
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)


if __name__ == '__main__':
    main()
